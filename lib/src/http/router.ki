
class RouteBlock[T] {
	route: ?Route[T] = null;
	blocks: Map[RouteBlock[T]];
}

class RouteArg {
	name: String;
	i: i32;
}

class Router[T] {

	-block: RouteBlock[T];
	inited: bool = false;

	static fn new() CLASS {
		return CLASS {
			block: RouteBlock[T] {
				blocks: Map[RouteBlock[T]]{}
			}
		};
	}

	fn add(method: &String, url: &String, handler: T) void !invalid_route {

		if url.bytes() == 0 || url.byte(0) != '/' {
			throw invalid_route;
		}

		let url_tmp = url.sub_str_bytes(1, url.bytes() - 1);
		let parts = url_tmp.split("/");
		parts.prepend(method + "");

		let block = this.block;
		let args = Array[RouteArg].new(2);
		let wcard_index = -1#i32;

		each parts as i, part {
			if part.bytes() == 0 {
				continue;
			}

			let blocks = block.blocks;

			let is_arg = part.byte(0) == '@';
			let is_wcard = part == "*";
			let key = part;

			if is_arg {
				let name = key.sub_str_bytes(1, key.bytes() - 1);
				if name.bytes() == 0 {
					throw invalid_route;
				}
				args.push(RouteArg { i: i @as i32, name: name });
				key = "@";
			} else if is_wcard {
				key = "*";
				wcard_index = i @as i32;
			}

			if wcard_index >= 0 && is_wcard == false {
				throw invalid_route;
			}

			let find = blocks.get(key) !? {{
				let v = RouteBlock[T]{ blocks: Map[RouteBlock[T]]{} };
				let ref = share(v);
				blocks.set(key, v);
				return ref @as RouteBlock[T];
			}};

			block = find;
		}

		block.route = Route[T]{ handler: handler, args: args };
	}

	fn find(method: &String, url: &String) +Route[T] !not_found {
		let parts_ = url.split("/");
		let parts = Array[String].new(2);
		each parts_ as i, part {
			if part.bytes() == 0 {
				continue;
			}
			parts.push(part + "");
		}

		parts.prepend(method + "");
		let arg_c = parts.length;

		return Router[T].find_route(this.block, 0, arg_c @as u8, parts) ?! throw not_found;;
	}

	-static fn find_route(block: &RouteBlock[T], index: u8, arg_c: u8, parts: &Array[String]) &?Route[T] {

		if index == arg_c {
			return block.route;
		}

		let p = parts.get(index) !! return null;;

		let part = p;

		if part != "*" {
			let sub_block = block.blocks.get(part) !? null;
			if @isset(sub_block) {
				let route = CLASS.find_route(sub_block, index + 1, arg_c, parts);
				if @isset(route) : return route;
			}
		}

		part = "@";
		let sub_block = block.blocks.get(part) !? null;
		if @isset(sub_block) {
			let route = CLASS.find_route(sub_block, index + 1, arg_c, parts);
			if @isset(route) : return route;
		}


		let sub_block_ = block.blocks.get("*") !! return null;;
		return sub_block_.route;
	}
}
