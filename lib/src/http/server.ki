
header "sys" as sys;

use os;
use net;
use io;
use utils;
use fs;

class ServerData {
    socket: net:SocketTCP;
    max_connections: uxx;
    thread_nr: uxx = 0;
    handler: fn(Request)(Response);
    static_dirs: Array[String] = Array[String].new();
    show_info: bool;
}

class Server {
    host: String;
    port: u16;
    socket: net:SocketTCP;
    max_connections: uxx;
    handler: fn(Request)(Response);
    static_dirs: Array[String] = Array[String].new();
    show_info: bool = false;

    static fn new(host: String, port: u16, handler: fn(Request)(Response)) Server !socket_init_error {

        let max_connections : uxx = 10000;
        let socket = net:Socket.new_tcp(host, port) !! throw socket_init_error;;

        return Server{
            host: host,
            port: port,
            socket: socket,
            max_connections: max_connections,
            handler: handler,
        };
    }

    -fn server_data() ServerData {

        let dirs = Array[String].new();
        each this.static_dirs as dir {
            dirs.push(dir + "");
        }

        return ServerData {
            socket: this.socket.clone(),
            max_connections: this.max_connections,
            handler: this.handler,
            show_info: this.show_info,
            static_dirs: dirs,

        };
    }

    fn start(worker_count: i32 = 16) void {

        // SIGINT
        os:signal(os:SIG.hup, interrupt);
        // SIGPIPE
        os:signal_ignore(os:SIG.pipe);

        if worker_count < 1 {
            worker_count = 1;
        }
        if worker_count > 128 {
            worker_count = 128;
        }

        println("[+] Running http server on port " + this.port.str());
        println("[+] Worker count: " + worker_count.str());

        worker_count--;
        while worker_count > 0 {
            let copy = this.server_data();
            let thread = os:Thread[ServerData].start(Server.worker, copy) !! {
                println("[x] Failed to start new thread, retrying");
                os:sleep_ms(1000);
                continue;
            };
            worker_count--;
        }

        let copy = this.server_data();
        Server.worker(copy);
        os:sleep_ms(200);
    }

    -static fn worker(data_: ServerData) void {

        let data = data_;

        let max_connections = data.max_connections;
        let handler = data.handler;

        let cons = Array[Connection].new(50);
        let index_pool = utils:Pool[uxx].new(max_connections);
        let nr = @atomic_op data.thread_nr ADD 1;

        //println("[-] Start thread: " + nr.str());

        let sock = data.socket;
        let sock_fd = sock.fd;

        let poll = io:Poll.new(max_connections);
        let sock_lsn = poll.listener(sock_fd);
        sock_lsn.read(true);

        while true {
            let result_count = poll.wait();
            let i : uxx = 0;

            while i < result_count {
                let event = poll.get_event(i) !! break;;
                i++;

                let lsn = event.listener;
                let fd = lsn.fd;

                //println("👋 Event thread: " + nr.str() + " | FD: " + fd.str());

                if fd == sock_fd {
                    // New connection
                    let netcon = sock.accept() !! {
                        continue;
                    };

                    let fd = netcon.fd;
                    if data.show_info {
                        println("[+] New connection: " + fd.str());
                    }

                    let index = index_pool.pop() !? max_connections;
                    if index == max_connections {
                        let http_con = Connection {
                            netcon: netcon,
                            fd: fd,
                        };
                        index = cons.push(http_con);
                    } else {
                        // Clear existing connection io buffers
                        let http_con = cons.get(index) !! {
                            net:Socket.close(fd);
                            println("[+] Max connections reached, closing connection");
                            continue;
                        };
                        http_con.fd = fd;
                        http_con.netcon = netcon;

                        http_con.reset_parser();
                        http_con.reset_out();
                        http_con.reset_request_data();
                    }

                    let lsn = poll.listener(fd, index);
                    lsn.read(true);
                    lsn.write(false);
                    lsn.stopped_reading(true);

                    continue;
                }

                rep lsn = lsn @as io:PollListener;

                // Get connection
                let index = lsn.key;
                let http_con = cons.get(index) !! {
                    println("❓ Missing http connection : " + nr.str());
                    net:Socket.close(fd);
                    poll.remove(lsn);
                    index_pool.add(index)!;
                    continue;
                };

                if http_con.fd != fd {
                    println("❗ fd changed : " + nr.str() + " | " + http_con.fd.str() + " -> " + fd.str() + " | key: " + lsn.key.str());
                    net:Socket.close(fd);
                    poll.remove(lsn);
                    index_pool.add(index)!;
                    continue;
                }

                // Existing connection
                if event.wants_to_close() {
                    if data.show_info {
                        println("[+] Close connection: " + fd.str());
                    }
                    net:Socket.close(fd);
                    poll.remove(lsn);
                    index_pool.add(index)!;
                    continue;
                }

                if event.is_writable() {
                    //println("[+] Continue sending response: " + fd.str());

                    if http_con.can_clear_out() {
                        http_con.reset_out();
                    }

                    http_con.send_response_bytes();

                    if !http_con.has_data_to_send() {
                        lsn.write(false);
                        http_con.reset_out();
                    }
                    continue;
                }
                if event.is_readable() {
                    Server.respond(data, http_con, handler) !! {
                        if data.show_info {
                            println("[+] Invalid request: " + fd.str());
                        }
                        net:Socket.close(fd);
                        poll.remove(lsn);
                        index_pool.add(index)!;
                        continue;
                    };
                    if http_con.has_data_to_send() {
                        lsn.write(true);
                    } else {
                        http_con.reset_out();
                    }

                    if http_con.phase == 0 && http_con.parse_pos == http_con.read_buf.length {
                        http_con.reset_parser();
                    }
                    continue;
                }
            }
        }
    }

    -static fn respond(data: *ServerData, http_con: *Connection, handler: fn(Request)(Response)) void !read_error !sent_error {

        let buf_size : i32 = 65535;
        let read_buf = http_con.read_buf;
        read_buf.minimum_free_space(buf_size);
        while true {
            #if OS == win
            let rcvd = sys.recv(http_con.fd, read_buf.data + read_buf.length, buf_size, 0);
            #else
            let rcvd = sys.read(http_con.fd, read_buf.data + read_buf.length, buf_size);
            #end
            if (rcvd == -2){
                // EAGAIN
                return;
            } else if (rcvd < 0) {
                throw read_error;
            } else if (rcvd == 0) {
                break;
            }

            read_buf.length += rcvd @as uxx;

            while http_con.parse_pos < http_con.read_buf.length {
        
                http_con.parse() !! {
                    throw sent_error;
                };

                if http_con.body_parsed {

                    if data.static_dirs.length > 0 {
                        let path = http_con.request_path.trim("/");
                        each data.static_dirs as dir {
                            let fullpath = dir + path; 
                            if fs:is_file(fullpath) {
                                let stream = fs:open(fullpath, true, false) !! continue;;
                                http_con.send_file(stream, null);
                                http_con.reset_request_data();
                                return;
                            }
                        }
                    }

                    let req = Request{
                        http_con: &http_con,
                        headers: http_con.headers,
                        method: http_con.request_method,
                        path: http_con.request_path,
                    };
                    let resp = handler(req);

                    http_con.respond(resp);
                    http_con.reset_request_data();
                }
            }

            if(rcvd < buf_size) {
                break;
            }
        }
    }

    fn add_static_dir(path: *String) void {
        let full = fs:exe_dir() + "/" + path.trim("/") + "/";
        println("[+] Add static dir: " + full);
        this.static_dirs.push(full);
    }
}

global interrupted : bool;
fn interrupt(sig: i32) void {
    if(interrupted){
        os:exit(1);
    }
    interrupted = true;
    println("Interrupt - Stopping http servers...");
    os:exit(1);
}
