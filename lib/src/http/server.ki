
header "sys" as sys;

use os;
use net;
use io;
use utils;
use fs;

class ServerData {
    socket: net:SocketTCP;
    max_connections: uxx;
    thread_nr: uxx = 0;
    handler: fn(&Request)(Response);
    static_dirs: Array[String] = Array[String].new();
    show_info: bool;
}

class Server {
    - host: +String;
    - port: u16;
    - socket: net:SocketTCP;
    - max_connections: uxx;
    - handler: fn(&Request)(Response);
    - static_dirs: Array[String] = Array[String].new();
    show_info: bool = false;

    static fn new(host: &String, port: u16, handler: fn(&Request)(Response)) Server !socket_init_error !socket_bind_error {

        rep host = share(host);
        let max_connections : uxx = 10000;
        let socket = net:Socket.new_tcp(host, port, false) !! throw socket_init_error;;
        socket.bind() !! throw socket_bind_error;;

        return Server{
            host: host,
            port: port,
            socket: socket,
            max_connections: max_connections,
            handler: handler,
        };
    }

    - fn server_data() ServerData {

        let dirs = Array[String].new();
        each this.static_dirs as dir {
            dirs.push(dir.copy());
        }

        return ServerData {
            socket: this.socket.clone(),
            max_connections: this.max_connections,
            handler: this.handler,
            show_info: this.show_info,
            static_dirs: dirs,
        };
    }

    fn start(worker_count: i32 = 16) void {

        // SIGINT
        os:signal(os:SIG.hup, interrupt);
        // SIGPIPE
        os:signal_ignore(os:SIG.pipe);

        if worker_count < 1 {
            worker_count = 1;
        }
        if worker_count > 128 {
            worker_count = 128;
        }

        if this.show_info {
            println("[+] Running http server on port " + this.port.str());
            println("[+] Worker count: " + worker_count.str());
        }

        worker_count--;
        while worker_count > 0 {
            let copy = this.server_data();
            let thread = os:Thread[ServerData].start(Server.worker, copy) !! {
                println("[x] Failed to start new thread, retrying");
                os:sleep_ms(1000);
                continue;
            };
            worker_count--;
        }

        let copy = this.server_data();
        Server.worker(copy);
        os:sleep_ms(200);
    }

    - static fn worker(data_: ServerData) void {

        let data = data_;

        let max_connections = data.max_connections;
        let handler = data.handler;

        let nr = @atomic_op data.thread_nr ADD 1;

        //println("[-] Start thread: " + nr.str());

        let sock = data.socket;
        let sock_fd = sock.fd;

        let poll = io:Poll[?Connection].new();
        let sock_lsn = poll.create_listener(sock_fd, null);
        sock_lsn.detect_read_request(true);

        while true {
            let events = poll.wait();
            let event_count = events.length;
            let i : uxx = 0;

            while i < event_count {
                let lsn = events.get(i) !! break;;
                let fd = lsn.fd;
                i++;

                //println("👋 Event thread: " + nr.str() + " | FD: " + fd.str());

                if fd == sock_fd {
                    // New connection
                    let netcon = sock.accept() !! {
                        continue;
                    };

                    let fd = netcon.fd;
                    if data.show_info {
                        println("[+] New connection: " + fd.str());
                    }

                    let http_con = Connection {
                        netcon: netcon,
                        fd: fd,
                    };

                    let lsn = poll.create_listener(fd, http_con);
                    lsn.detect_read_request(true);
                    lsn.detect_write_request(false);
                    continue;
                }

                let http_con = lsn.data ?! {
                    println("❓ Missing http connection for fd: " + lsn.fd.str());
                    net:Socket.close(lsn.fd);
                    continue;
                };

                if http_con.fd != fd {
                    println("❗ fd mismatch");
                    net:Socket.close(fd);
                    continue;
                }

                // Existing connection
                if lsn.has_stopped_the_connection() {
                    if data.show_info {
                        println("[+] Close connection: " + fd.str());
                    }
                    net:Socket.close(fd);
                    continue;
                }

                if lsn.has_write_request() {
                    //println("[+] Continue sending response: " + fd.str());

                    if http_con.can_clear_out() {
                        http_con.reset_out();
                    }

                    http_con.send_response_bytes();

                    if !http_con.has_data_to_send() {
                        lsn.detect_write_request(false);
                        http_con.reset_out();
                    }
                    continue;
                }
                if lsn.has_read_request() {
                    Server.respond(data, http_con, handler) !! {
                        if data.show_info {
                            println("[+] Invalid request: " + fd.str());
                        }
                        net:Socket.close(fd);
                        continue;
                    };
                    if http_con.has_data_to_send() {
                        lsn.detect_write_request(true);
                    } else {
                        http_con.reset_out();
                    }
                    continue;
                }
            }
        }
    }

    - static fn respond(data: &ServerData, http_con: &Connection, handler: fn(&Request)(Response)) void !read_error !sent_error {

        while true {
            let res = http_con.parse_result;
            let read_buf = http_con.read_buf;
            while true {
                if read_buf.start_index == read_buf.length {
                    let bytes = http_con.netcon.recv(read_buf) !! |err| {
                        if err == err#e_again {
                            return;
                        }
                        http_con.respond(Response.error(400));
                        throw read_error, "Failed reading from connection";
                    };
                }
                Parser.parse_request(read_buf, res) !! {
                    http_con.respond(Response.error(400));
                    throw read_error, "Invalid request";
                };

                read_buf.clear_before_start_index();

                if res.fully_parsed {
                    break;
                }
            }

            if !res.fully_parsed {
                return;
            }

            http_con.reset_parser();

            if data.static_dirs.length > 0 {
                let path = res.path.trim("/");
                each data.static_dirs as dir {
                    let fullpath = dir + path; 
                    if fs:is_file(fullpath) {
                        let stream = fs:open(fullpath, true, false) !! continue;;
                        http_con.send_file(stream, null);
                        return;
                    }
                }
            }

            let req = Request{
                http_con: share(http_con),
			    headers: swap(res.headers, Map[String]{}),
			    method: swap(res.method, ""),
			    body: swap(res.body, ""),
			    path: swap(res.path, ""),
            };
            let resp = handler(req);

            http_con.respond(resp);
        }
    }

    fn add_static_dir(path: &String, relative_to_exe: bool = false) void {
        let full = path + "";
        if relative_to_exe {
            full = fs:exe_dir() + "/" + path.trim("/");
        }
        full = full.rtrim("/") + "/";
        if this.show_info {
            println("[+] Add static dir: " + full);
        }
        this.static_dirs.push(full);
    }
}

global interrupted : bool;
fn interrupt(sig: i32) void {
    if(interrupted){
        os:exit(1);
    }
    interrupted = true;
    println("Interrupt - Stopping http servers...");
    os:exit(1);
}
