
class Response {
	status: u32 = 200;
	body: String = "";
	filepath: ?String = null;
	filename: ?String = null;
	content_type: String = "text/plain";
	headers: ?Map[String] = null;

	//static fn file(String path) Response or file_not_found {
	//	if(fs:exists(path) == false){
	//		throw file_not_found;
	//	}
	//	let r = Response{ filepath: path };
	//	return r;
	//}
	static fn html(body: String, code: u32 = 200, headers: ?Map[String] = null) Response {
		return Response{ body: body, status: code, content_type: "text/html", headers: headers };
	}
	static fn json(body: String, code: u32 = 200, headers: ?Map[String] = null) Response {
		return Response{ body: body, status: code, content_type: "application/json", headers: headers };
	}
	static fn text(body: String, code: u32 = 200, content_type: String = "text/plain", headers: ?Map[String] = null) Response {
		return Response{ body: body, status: code, content_type: content_type, headers: headers };
	}
	static fn redirect(location: String, code: u32  = 301, headers: ?Map[String] = null) Response {
		rep headers = headers ?? Map[String]{};
		headers.set("Location", location);
		return Response{ status: code, headers: headers };
	}
	static fn error(code: u32) Response {
		return Response{ status: code };
	}
	static fn file(path: &String, filename: ?String  = null) Response {
		return Response{ filepath: path + "", filename: filename };
	}

	fn compile(buf: &ByteBuffer) void {

		let len = this.body.bytes();

		buf.append_str("HTTP/1.1 ");
		buf.append_str(this.status.str());
		buf.append_str(" OK\r\n");

		buf.append_str("Content-Type: ");
		buf.append_str(this.content_type);
		buf.append_str("\r\n");

		buf.append_str("Content-Length: ");
		buf.append_str(this.body.bytes().str());
		buf.append_str("\r\n");

		let headers = this.headers;
		if @isset(headers) {
			each headers._keys as i,k {
				let v = headers._values.get(i) !! break;;
				buf.append_str(k);
				buf.append_str(": ");
				buf.append_str(v);
				buf.append_str("\r\n");
			}
		}

		buf.append_str("\r\n");
		buf.append_str(this.body);
	}
}
