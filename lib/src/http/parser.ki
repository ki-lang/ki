
class ServerRequest {
	method: String = "";
	path: String = "";
	headers: Map[String] = Map[String]{};
	body: String = "";
}

class ParseResult {
	~ status: uxx = 0;
	~ method: String = "";
	~ path: String = "";
	~ headers: Map[String] = Map[String]{};
	~ body: String = "";
	~ content_length: uxx = 0;
	~ fully_parsed: bool = false;
	~ headers_parsed: bool = false;
	- stage: uxx = 0;
}

class Parser {

	static fn parse_response(bytes: &ByteBuffer, result: &ParseResult, only_headers: bool = false) !invalid {
		Parser.parse_bytes(bytes, result, only_headers, false) !! throw invalid;;
	}
	static fn parse_request(bytes: &ByteBuffer, result: &ParseResult, only_headers: bool = false) !invalid {
		Parser.parse_bytes(bytes, result, only_headers, true) !! throw invalid;;
	}

	- static fn parse_bytes(bytes: &ByteBuffer, result: &ParseResult, only_headers: bool, is_request: bool) !invalid {

		// Stage 0. Protocol & status
		// Stage 1. Headers
		// Stage 2. Body
		// Stage 3. Done

		if result.fully_parsed {
			result.stage = 0;
			result.headers_parsed = false;
			result.fully_parsed = false;
			result.content_length = 0;
			result.status = 0;
			result.body = "";
			result.headers = Map[String]{};
		}

		let stage = result.stage;
		let data = bytes.data;
		let pos = bytes.start_index;
		let length = bytes.length;

		if stage > 2 && only_headers {
			return;
		}

		let ch = (pos > 0) ? @ptrv(data, u8, pos - 1) : '\0';
		let prev_ch = '\0';

		// Header
		if stage == 0 {
			let index = bytes.index_of_byte('\r', pos) !! return;;
			if index + 1 == length : return;
			if @ptrv(data, u8, index + 1) != '\n' : throw invalid;

			let space1 = bytes.index_of_byte(' ', pos) !! throw invalid;;
			let space2 = bytes.index_of_byte(' ', space1 + 1) !! throw invalid;;

			if space1 > index || space2 > index : throw invalid;

			let part1 = bytes.sub_str(pos, space1);
			let part2 = bytes.sub_str(space1 + 1, space2 - space1 - 1);
			let part3 = bytes.sub_str(space2 + 1, index - space2 - 1);

			if is_request {
				// Request "GET / HTTP/1.1"
				result.method = part1;
				result.path = part2;
				let version = part3;
			} else {
				// Response "HTTP/1.1 200 OK"
				let version = part1;
				let status_str = part2;
				result.status = status_str.to_uxx() !! throw invalid;;
			}

			pos = index + 2;
			bytes.start_index = pos;
			stage = 1;
			result.stage = stage;
		}

		// Headers
		let headers = result.headers;
		let content_len = result.content_length;
		while stage == 1 {
			let index = bytes.index_of_byte('\r', pos) !! return;;
			if index + 1 == length : return;
			if @ptrv(data, u8, index + 1) != '\n' : throw invalid;

			if index == pos {
				// End of headers
				pos = index + 2;
				bytes.start_index = pos;
				stage = 2;
				result.stage = stage;

				let content_len_str = headers.get("content-length") !? "0";
				content_len = content_len_str.to_uxx() !! {
					throw invalid;
				};
				result.content_length = content_len;
				result.headers_parsed = true;
				break;
			}

			let split = bytes.index_of_byte(':', pos) !! throw invalid;;
			if split > index : throw invalid;
			while @ptrv(data, u8, split + 1) == ' ' {
				split++;
			}

			let key = bytes.sub_str(pos, split - pos - 1);
			let value = bytes.sub_str(split + 1, index - split - 1);

			headers.set(key.to_lower(), value);

			pos = index + 2;
			bytes.start_index = pos;
		}

		if only_headers {
			return;
		}

		if stage == 2 {
			let bytes_left = length - pos;
			if bytes_left < content_len {
				return;
			}

			let body = bytes.sub_str(pos, content_len);

			pos += content_len;
			bytes.start_index = pos;
			result.fully_parsed = true;
			result.body = body;
			result.stage = 3;
		}

	}
}
