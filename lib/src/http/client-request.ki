
header "openssl" as ssl;

use net;

class ClientRequest {
	method: String;
	url: String;
	body: String = "";
	headers: Map[String] = Map[String]{};

	fn exec() ClientResponse !invalid_url !connection_failed !invalid_response {

		let parts = this.url.parse_uri();

		let is_https = parts.protocol == "https";

		let sock = net:Socket.new_tcp(parts.domain, is_https ? 443#u16 : 80#u16, true) !! {
			throw invalid_url, "Invalid request url";
		};

		let con = sock.connect() !! {
			throw connection_failed, "Connection failed";
		};

		// Send request
		let buf = ByteBuffer.new(this.body.bytes() + 100);
		let len = this.body.bytes();

		let method = this.method;

		buf.append_str(method);
		buf.append_str(" ");
		buf.append_str(parts.path);
		if parts.query != "" {
			buf.append_str("?");
			buf.append_str(parts.query);
		}
		buf.append_str(" HTTP/1.1\r\n");

		buf.append_str("Host: ");
		buf.append_str(parts.domain);
		buf.append_str("\r\n");

		buf.append_str("Content-Length: ");
		buf.append_str(this.body.bytes().str());
		buf.append_str("\r\n");

		let headers = this.headers;
		each headers._keys as i,k {
			let v = headers._values.get(i) !! break;;
			buf.append_str(k);
			buf.append_str(": ");
			buf.append_str(v);
			buf.append_str("\r\n");
		}

		buf.append_str("\r\n");
		buf.append_str(this.body);

		let sendres = net:SendResult{};
		con.send(buf, 0, sendres);

		if sendres.connection_error {
			throw connection_failed, "Connection failed";
		}

		// Receive response
		let recv = net:RecvResult{};
		buf.clear();
		con.recv(buf, recv);

		// Parse response
		let res = ClientResponse{};
		Parser.parse_response(buf, res) !! {
			throw invalid_response, "Invalid response";
		};

		return res;
	}

}
