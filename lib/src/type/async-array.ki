
use mem;

class AsyncArray[T] async {
	~size: uxx;
	~length: uxx;
	~data: ptr;

	static fn new(start_size: uxx = 2) CLASS {
		if start_size < 2 {
			start_size = 2;
		}
		return CLASS {
			size: start_size,
			length: 0,
			data: mem:alloc(start_size * sizeof(T)),
		};
	}

	fn push(value: +T) uxx {
		let size = this.size;
		let length = this.length;
		let data = this.data;

		if length == size {
			// Increase mem
			let new_size = size * 2;
			let new_data = mem:alloc(new_size * sizeof(T));
			mem:copy(data, new_data, size * sizeof(T));
			data = new_data;
			this.data = new_data;
			this.size = new_size;
		}

		@ptrv(data, T, length) = value;
		this.length = length + 1;

		return length;
	}

	fn get(index: uxx) T !not_found {
		if index >= this.length {
			throw not_found;
		}
		let data = this.data + (index * sizeof(T));
		return @ptrv(data, T, 0);
	}

	fn set(index: uxx, value: +T) void !out_of_range {
		if index >= this.length {
			throw out_of_range;
		}
		let data = this.data + (index * sizeof(T));
		@ptrv(data, T, 0) = value;
	}

	fn __each_init() uxx {
		return 0;
	}
	fn __each(key_ref: uxx[1]) T !end {
		let key = key_ref[0];
		if key == this.length {
			throw end;
		}
		key_ref[0] = key + 1;
		return this.get(key) !! throw end;;
	}
}
