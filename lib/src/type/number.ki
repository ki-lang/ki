
use io;

trait Number {

	fn str() String {
        return this.str_base(10);
    }

    fn __string() String {
        return this.str_base(10);
    }

    fn hex() String {
        return this.str_base(16);
    }

	fn str_base(base: u8) String {

		let negative = false;
        let num = this;

        // Handle 0 explicitly, otherwise empty string is printed for 0
        if (num == 0) {
            return "0";
        }

		// In standard itoa(), negative numbers are handled only with
        // base 10. Otherwise numbers are considered unsigned.
        #if TYPE_IS_SIGNED_NUMBER CLASS
        if (num < 0 && base == 10) {
            negative = true;
            num *= -1;
        }
        #end
 
        let abs = num @as uxx;
 
        // Process individual digits
        let buf_adr = @stack_alloc(32);
        let len : u32 = 0;
        let ch : u8 = 0;
        while (abs != 0) {
            let rem : u8 = (abs % base) @as u8;
            if(rem > 9){
                ch = (rem-10) + 'a';
            } else {
                ch = rem + '0';
            }
			@ptrv(buf_adr, u8, 0) = ch;
            buf_adr++;
            len++;
            abs = abs/base;
        }

        if (negative) {
            @ptrv(buf_adr, u8, 0) = '-';
            buf_adr++;
            len++;
        }
 
        // Reverse the string
        let str = String.make_empty(len);
        let str_adr = str.data();
        while(len > 0){
            len-=1;
            buf_adr-=1;
			@ptrv(str_adr, u8, 0) = @ptrv(buf_adr, u8, 0);
            str_adr+=1;
        }
        return str;
    }

	fn debug() void {
        this.debug_base(10);
    }

	fn debug_base(base: u8) void {

		let negative = false;
        let num = this;

        // Handle 0 explicitly, otherwise empty string is printed for 0
        if (num == 0) {
	        io:write(1, "0") !? 0;
        }

		// In standard itoa(), negative numbers are handled only with
        // base 10. Otherwise numbers are considered unsigned.
        #if TYPE_IS_SIGNED_NUMBER CLASS
        if (num < 0 && base == 10) {
            negative = true;
            num *= -1;
        }
        #end
 
        let abs = num @as uxx;
 
        // Process individual digits
        let buf_adr = @stack_alloc(32);
        let len : u32 = 0;
        let ch : u8 = 0;
        while (abs != 0) {
            let rem : u8 = (abs % base) @as u8;
            if(rem > 9){
                ch = (rem-10) + 'a';
            } else {
                ch = rem + '0';
            }
			@ptrv(buf_adr, u8, 0) = ch;
            buf_adr++;
            len++;
            abs = abs/base;
        }

        if (negative) {
            @ptrv(buf_adr, u8, 0) = '-';
            buf_adr++;
            len++;
        }
 
        // Reverse the string
        let res = @stack_alloc(32);
        let str_adr = res;
        let bytes = len;
        while(len > 0){
            len-=1;
            buf_adr-=1;
			@ptrv(str_adr, u8, 0) = @ptrv(buf_adr, u8, 0);
            str_adr+=1;
        }
	    io:write_from_ptr(1, res, bytes) !? 0;
        print("\n");
    }
}
