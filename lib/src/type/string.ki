
// const:   {string_length:uxx}-1-{...string bytes...}
// dynamic: {string_length:uxx}-0-{pad 1}-{ref_count:u16}{ref_weak_count:u32}-{...string bytes...}

use mem;
use os;

class String type:ptr track {

	/////////////////////
	// Core
	/////////////////////

	fn is_const() bool %inline {
		return @ptrv(this @as ptr + @sizeof(uxx), u8, 0) == 1#u8;
	}

	fn bytes() uxx %inline {
		return @ptrv(this @as ptr, uxx, 0);
	}

	fn rc() u32 %inline {
		if(this.is_const()) { return 420; } // Let the person who has insight calculate the number of the beast, for it is the number of a man. That number is 420.
		let adr = this @as ptr;
		adr += @sizeof(uxx) + 2;
		return @ptrv(adr, u16, 0) @as u32;
	}
	fn rc_weak() u32 %inline {
		if(this.is_const()) { return 0; }
		let adr = this @as ptr;
		adr += @sizeof(uxx) + 4;
		return @ptrv(adr, u32, 0);
	}

	fn data() ptr %inline {
		let adr = this @as ptr;
		if(this.is_const()){
			adr += @sizeof(uxx) + 1;
		} else {
			adr += @sizeof(uxx) + 8;
		}
		return adr;
	}

	/////////////////////
	// Read
	/////////////////////

	fn byte(index: uxx) u8 %inline {
		return @ptrv(this.data(), u8, index);
	}

	fn sub_str_bytes(start_index: uxx, length: uxx) String {
		let this_bytes = this.bytes();
		if(start_index > this_bytes){
			return "";
		}
		if((start_index + length) > this_bytes){
			length = this_bytes - start_index;
		}
		if(length == 0){
			return "";
		}
		let from = this.data() + start_index;
		let res = String.make_empty(length);
		mem:copy(from, res.data(), length);
		return res;
	}

	/////////////////////
	// Split / Merge
	/////////////////////

	fn split(on: *String) Array[String] {
		let result = Array[String].new();

		let pos : uxx = 0;
		let adr = this.data();
		let adr_on = on.data();
		let bytes = this.bytes();
		let bytes_left = bytes;
		let bytes_on = on.bytes();

		let part = ByteBuffer.new(100);
		while pos < bytes {
			if(bytes_on > bytes_left){
				break;
			}
			let i : uxx = 0;
			let tmp_adr1 = adr;
			let tmp_adr2 = adr_on;
			while(i < bytes_on){
				let byte1 : u8 = @ptrv(tmp_adr1, u8, 0);
				let byte2 : u8 = @ptrv(tmp_adr2, u8, 0);
				if(byte1 != byte2) {
					break;
				}
				i++;
				tmp_adr1++;
				tmp_adr2++;
			}
			if(i == bytes_on){
				result.push(part.to_str());
				part.clear();
				pos += bytes_on;
				adr += bytes_on;
				bytes_left -= bytes_on;
				continue;
			}

			let bytec : u8 = 1;
			let byte : u8 = @ptrv(adr, u8, 0);
			if(byte > 127){
				byte = byte << 1;
				while(byte > 127){
					bytec++;
					byte = byte << 1;
				}
			}
			if(bytec > 4){
				// Invalid utf8 char
				bytec = 1;
			}
			if(bytec > bytes_left){
				break;
			}
			pos += bytec;
			bytes_left -= bytec;
			while(bytec > 0){
				let byte : u8 = @ptrv(adr, u8, 0);
				part.append_byte(byte);
				bytec--;
				adr++;
			}
		}
		while bytes_left > 0 {
			let byte : u8 = @ptrv(adr, u8, 0);
			part.append_byte(byte);
			bytes_left--;
			adr++;
		}

		result.push(part.to_str());

		return result;
	}

	/////////////////////
	// Adjustments
	/////////////////////

	fn trim(part: *String) String {
		let res = this.ltrim(part);
		return res.rtrim(part);
	}

	fn rtrim(part: *String) String {
		let part_bytes = part.bytes();
		let part_data = part.data();
		let bytes = this.bytes();
		let result = this + "";
		while part_bytes <= bytes {
			let data = result.data();
			let new_len = bytes -  part_bytes;
			if !mem:equal(data + new_len, part_data, part_bytes) {
				break;
			}
			result = result.sub_str_bytes(0, new_len);
			bytes = result.bytes();
		}
		return result;
	}

	fn ltrim(part: *String) String {
		let part_bytes = part.bytes();
		let part_data = part.data();
		let bytes = this.bytes();
		let result = this + "";
		while part_bytes <= bytes {
			let data = result.data();
			if !mem:equal(data, part_data, part_bytes) {
				break;
			}
			result = result.sub_str_bytes(part_bytes, bytes -  part_bytes);
			bytes = result.bytes();
		}
		return result;
	}

	fn replace(find: *String, with: *String) String {
		let pos : uxx = 0;
		let adr = this.data();
		let adr_find = find.data();
		let bytes = this.bytes();
		let bytes_left = bytes;
		let bytes_find = find.bytes();
		if bytes_find == 0 {
			return this + "";
		}
		let buf = ByteBuffer.new(bytes);
		while(pos < bytes){
			if(bytes_find > bytes_left){
				break;
			}
			let i : uxx = 0;
			while(i < bytes_find){
				let byte1 : u8 = @ptrv(adr, u8, i);
				let byte2 : u8 = @ptrv(adr_find, u8, i);
				if byte1 != byte2 {
					break;
				}
				i++;
			}
			if(i == bytes_find){
				buf.append_str(with);
				pos += bytes_find;
				adr += bytes_find;
				bytes_left -= bytes_find;
				continue;
			}

			let bytec : u8 = 1;
			let byte : u8 = @ptrv(adr, u8, 0);
			if((byte & 128) > 0){
				bytec = 0;
				while((byte & 128) > 0 ){
					bytec++;
					byte = byte << 1;
				}
			}
			if(bytec > 4){
				// Invalid utf8 char
				bytec = 1;
			}
			pos += bytec;
			bytes_left -= bytec;
			while(bytec > 0){
				let byte : u8 = @ptrv(adr, u8, 0);
				buf.append_byte(byte);
				bytec--;
				adr++;
			}
		}
		while(bytes_left > 0){
			let byte : u8 = @ptrv(adr, u8, 0);
			buf.append_byte(byte);
			bytes_left--;
			adr++;
		}

		return buf.to_str();
	}

	fn replace_bytes(find: u8, with: *String) String {
		let len = this.bytes();
		let len_with = with.bytes();
		if len == 0 {
			return this + "";
		}
		let adr = this.data();
		let buf = ByteBuffer.new(len);
		let i : u32 = 0;
		while i < len {
			let ch = @ptrv(adr, u8, i);
			i++;
			if ch == find {
				buf.append_str(with);
			} else {
				buf.append_byte(ch);
			}
		}
		return buf.to_str();
	}

	/////////////////////
	// Index
	/////////////////////

	fn index_of_byte(fch: u8, start_index: uxx = 0) uxx !not_found !invalid_utf8 {
		let bytes = this.bytes();
		let pos = start_index;
		let adr = this.data();
		while(pos < bytes){
			let ch = @ptrv(adr, u8, pos);
			if(ch > 240){
				throw invalid_utf8;
			}
			if(ch > 127) {
				// utf8 char
				let bytec = 1#uxx;
				ch = ch << 1;
				while(ch > 127){
					bytec++;
					ch = ch << 1;
				}
				if(pos + bytec > bytes) {
					throw invalid_utf8;
				}
				pos += bytec;
				continue;
			} else if(ch == fch) {
				return pos;
			}
			pos++;
		}
		throw not_found;
	}

	/////////////////////
	// Converts
	/////////////////////

	fn to_lower() String {
		let bytes = this.bytes();
		let data = this.data();
		let new_str = String.make_empty(bytes);
		let new_data = new_str.data();
		let pos : uxx = 0;
		while pos < bytes {
			let byte : u8 = @ptrv(data, u8, pos);
			if byte > 127 {
				@ptrv(new_data, u8, pos) = byte;
				pos++;
				continue;
			}
			let is_upper = (byte > 64 && byte < 91) @as u8;
			@ptrv(new_data, u8, pos) = byte + (is_upper * 32);
			pos++;
		}
		return new_str;
	}

	fn to_c_string() c_string {
		let len = this.bytes();
		let bytes = len + 1;
		let adr = mem:alloc(bytes);
		mem:copy(this.data(), adr, len);
		@ptrv(adr + len, u8, 0) = 0;
		return adr @as c_string;
	}

	fn to_uxx() uxx !invalid_syntax {
		let i = this.bytes();
		let result : uxx = 0;
		let mult : uxx = 1;
		while i > 0 {
			i--;
			let ch = this.byte(i);
			if(ch < 48 || ch > 57){
				throw invalid_syntax;
			}
			result += ((ch @as uxx) - 48) * mult;
			mult *= 10;
		}
		return result;
	}

	/////////////////////
	// Internals
	/////////////////////

	fn copy() String {
		@ref this;
		return this @as String;
	}

	fn __ref() void {
		if this.is_const() { return; }
		let adr = (this @as ptr) + @sizeof(uxx) + 2;
		let rc = @ptrv(adr, u16, 0) + 1;
		@ptrv(adr, u16, 0) = rc;
	}
	fn __deref() void {
		if this.is_const() { return; }
		let adr = (this @as ptr) + @sizeof(uxx) + 2;
		let rc = @ptrv(adr, u16, 0) - 1;
		if rc == 0 {
			let rcw = @ptrv(adr + 2, u32, 0);
			if rcw == 0 {
				this.__free();
				return;
			}
		}
		@ptrv(adr, u16, 0) = rc;
	}
	fn __ref_weak() void {
		if this.is_const() { return; }
		let adr = (this @as ptr) + @sizeof(uxx) + 4;
		let rcw = @ptrv(adr, u32, 0) + 1;
		@ptrv(adr, u32, 0) = rcw;
	}
	fn __deref_weak() void {
		if this.is_const() { return; }
		let adr = (this @as ptr) + @sizeof(uxx) + 2;
		let adrw = adr + 2;
		let rcw = @ptrv(adrw, u32, 0) - 1;
		if rcw == 0 {
			let rc = @ptrv(adr, u16, 0);
			if rc == 0 {
				this.__free();
				return;
			}
		}
		@ptrv(adrw, u32, 0) = rcw;
	}
	fn __free() void {
		if this.is_const() { return; }
		mem:free(this @as ptr);
	}

	fn __add(str: *String) String {
		let this_len = this.bytes();
		let str_len = str.bytes();
		if str_len == 0 {
			@ref this;
			return this @as String;
		}
		let len = this_len + str_len;
		if len == 0 {
			return "";
		}
		let new_str = String.make_empty(len);
		let new_adr = new_str.data();
		mem:copy(this.data(), new_adr, this_len);
		new_adr += this_len;
		mem:copy(str.data(), new_adr, str_len);
		return new_str;
	}

	fn __eq(b: *String) bool {
		let a_ptr = this @as ptr;
		let b_ptr = b @as ptr;
		if(a_ptr == b_ptr) {
			return true;
		}
		let bytes = this.bytes();
		if(bytes != b.bytes()){
			return false;
		}
		return mem:equal(this.data(), b.data(), bytes);
	}

	fn __each_init() uxx {
		return 0;
	}
	fn __each(key_ref: uxx[1]) u8 !end {
		let key = key_ref[0];
		if key == this.bytes() {
			throw end;
		}
		key_ref[0] = key + 1;
		let data = this.data();
		return @ptrv(data + key, u8, 0);
	}

	/////////////////////
	// Other
	/////////////////////

	static fn make_empty(size: uxx) String {
		let adr = mem:alloc(size + 8 + @sizeof(uxx));
		let adr_ = adr;
		@ptrv(adr, uxx, 0) = size;
		adr += @sizeof(uxx);
		@ptrv(adr, u8, 0) = 0#u8;
		adr += 2;
		@ptrv(adr, u16, 0) = 1#u16;
		adr += 2;
		@ptrv(adr, u32, 0) = 0#u32;
		let res = adr_ @as String;
		return res;
	}

	static fn format(baselen: uxx, parts: ptr, partc: uxx, values: ptr) String {
		let bytes = baselen;
		let valuec = partc - 1;
		let i : uxx = 0;
		while i < valuec {
			let val = @ptrv(values, *String, i);
			bytes += val.bytes();
			i++;
		}
		let result = String.make_empty(bytes);
		let data = result.data();
		i = 0;
		while i < partc {
			if i > 0 {
				let val = @ptrv(values, *String, i - 1);
				let val_bytes = val.bytes();
				mem:copy(val.data(), data, val_bytes);
				data += val_bytes;
			}
			let part = @ptrv(parts, *String, i);
			let part_bytes = part.bytes();
			mem:copy(part.data(), data, part_bytes);
			data += part_bytes;
			i++;
		}
		return result;
	}

}
