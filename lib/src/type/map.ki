
// macro map {
// 	input {
// 		"[]" type;
// 		"{}" values @repeat @replace("=>", ",");
// 	}
// 	output {
// 		"<{\n"
// 		"let map = Map[%type].new();\n"
// 		"map.set(%values);\n"
// 		"return map;\n"
// 		"}"
// 	}
// }

// TODO : Use hash maps
class Map[T] {
	~_keys : Array[String] = Array[String].new();
	~_values : Array[T] = Array[T].new();

	static fn new() CLASS {
		return CLASS{};
	}

	fn set(key: &String, value: T) void {
		let index = this._keys.index_of(key) !! {
			// Set new key / value
			this._keys.push(key + "");
			this._values.push(value);
			return;
		};
		// Update existing key / value
		this._values.set(index, value) !! return;;
	}

	fn get(key: &String) +T !not_found {
		let index = this._keys.index_of(key) !! throw not_found;;
		return this._values.get(index) !! throw not_found;;
	}

	fn remove(key: &String) {
		let index = this._keys.index_of(key) !! return;;
		this._keys.remove_index(index);
		this._values.remove_index(index);
	}

	fn clear() {
		this._keys = Array[String].new();
		this._values = Array[T].new();
	}

	fn __each_init() uxx {
		return 0;
	}

	fn __each(key_index_ref: &uxx[1]) +String !end {
		let key_i = key_index_ref[0];
		let key_v = this._keys.get(key_i) !! throw end;;
		key_index_ref[0] = key_i + 1;
		return key_v;
	}
}
