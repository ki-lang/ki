
use mem;

macro array {
	input {
		"[]" type;
		"{}" values @repeat;
	}
	output {
		"{{\n"
		"let array = Array[%type].new();\n"
		"array.push(%values);\n"
		"return array;\n"
		"}}"
	}
}

class Array[T] {
	~size: uxx;
	~length: uxx = 0;
	~data: ptr;

	static fn new(start_size: uxx = 2) CLASS {
		if start_size < 2 {
			start_size = 2;
		}
		return CLASS {
			size: start_size,
			data: mem:alloc(start_size * @sizeof(T)),
		};
	}

	fn push(item: T) uxx {
		let size = this.size;
		let length = this.length;
		let data = this.data;

		if length == size {
			// Increase mem
			let new_size = size * 2;
			let new_data = mem:alloc(new_size * @sizeof(T));
			mem:copy(data, new_data, size * @sizeof(T));
			data = new_data;
			this.data = new_data;
			this.size = new_size;
		}

		@ptrv(data, T, length) = item;
		this.length = length + 1;
		@move item;

		return length;
	}

	fn prepend(item: T) void {

		let size = this.size;
		let length = this.length;
		let data = this.data;

		if length == size {
			// Increase mem
			let new_size = size * 2;
			let new_data = mem:alloc(new_size * @sizeof(T));
			mem:copy(data, new_data, size * @sizeof(T));
			data = new_data;
			this.data = new_data;
			this.size = new_size;
		}

		let to_pos = length;
		while to_pos > 0 {
			@ptrv(data, *T, to_pos) = @ptrv(data, *T, to_pos - 1);
			to_pos--;
		}

		@ptrv(data, T, 0) = item;
		this.length = length + 1;
		@move item;
	}

	fn get(index: uxx) &T !not_found {
		if index >= this.length {
			throw not_found;
		}

		let value = @ptrv(this.data, T, index);
		@ref value;

		return value;
	}

	fn set(index: uxx, value: T) void !out_of_range {
		if index >= this.length {
			throw out_of_range;
		}
		let data = this.data;
		let current = @ptrv(data, T, index);

		@ptrv(data, T, index) = value;
		@move value;
	}

	fn remove(index: uxx) void {
		println(index.str());
		if index == this.length - 1 {
			this.length--;
		}
		println("remove: " + (this.length).str());
	}
	fn pop() T !empty {
		if this.length > 0 {
			let value = @ptrv(this.data, T, this.length - 1);
			return value;
		}
		throw empty;
	}

	fn index_of(item: *T) uxx !not_found {
		let index : uxx = 0;
		let adr = this.data;
		let len = this.length;
		while(index < len){
			let x = @ptrv(adr, *T, index);
			if x == item {
				return index;
			}
			index++;
		}
		throw not_found;
	}

	// Internals
	fn __each_init() uxx {
		return 0;
	}

	fn __each(key_ref: uxx[1]) &T !end {
		let key = key_ref[0];
		if key >= this.length {
			throw end;
		}
		key_ref[0] = key + 1;
		return this.get(key) !! throw end;;
	}

	fn __before_free() void {
		// Deref items
		let index = 0#uxx;
		let length = this.length;
		let data = this.data;
		while index < length {
			let value = @ptrv(data, T, index);
			index++;
		}

		//
		mem:free(this.data);
	}
}
