
header "sys" as sys;

fn alloc(size: uxx) ptr {
	return sys.malloc(size);
}
fn free(adr: ptr) void {
	sys.free(adr);
}
fn calloc(size: uxx) ptr {
	let res = alloc(size);
	clear(res, size);
	return res;
}

fn sys_alloc(size: uxx) ptr {
	return sys.malloc(size);
}
fn sys_free(adr: ptr) void {
	sys.free(adr);
}

fn clear(adrc: ptr, length: uxx) void {
	let chunks = length / @sizeof(ptr);
	let i : uxx = chunks;
	while i > 0 {
		i--;
		@ptrv(adrc, uxx, i) = 0;
	}
	rep adrc = adrc + chunks * @sizeof(uxx);
	i = length % @sizeof(uxx);
	while i > 0 {
		i--;
		@ptrv(adrc, u8, i) = 0;
	}
}

fn copy(from: ptr, to: ptr, length: uxx) void {

	let i = 0#uxx;
	//let chunks = length / @sizeof(uxx);
	//while i < chunks {
	//	@ptrv(to, uxx, i) = @ptrv(from, uxx, i);
	//	i++;
	//}
	//i = i * @sizeof(uxx);
	while i < length {
		@ptrv(to, u8, i) = @ptrv(from, u8, i);
		i++;
	}
}

fn equal(a: ptr, b: ptr, length: uxx) bool {
	let chunks = length / @sizeof(ptr);
	let i : uxx = chunks;
	while i > 0 {
		i--;
		let av = @ptrv(a, uxx, i);
		let bv = @ptrv(b, uxx, i);
		if(av != bv) {
			return false;
		}
	}
	i = length % @sizeof(ptr);
	let offset = chunks * @sizeof(ptr);
	let ao = a + offset;
	let bo = b + offset;
	while i > 0 {
		i--;
		let av = @ptrv(ao, u8, i);
		let bv = @ptrv(bo, u8, i);
		if(av != bv) {
			return false;
		}
	}
	return true;
}