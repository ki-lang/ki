
header "sys" as sys;

use mem;

shared EXE_PATH : ?String;
global EXE_DIR : ?String;

class Path {
	parts: Array[String];

	static fn new(path: &String) Path {
		return Path{
			parts: path.split("/"),
		};
	}

	static fn exe_dir() Path {
		let path = Path.exe_path();
		path.pop();
		return path;
	}
	static fn exe_path() Path {
		return Path.new(exe_dir());
	}

	fn copy() Path {
		let parts = this.parts;
		let new = Array[String].new();
		each parts as part {
			new.push(part + "");
		}
		return Path{
			parts: new,
		};
	}

	fn pop() void {
		let v = this.parts.pop() !! return;;
	}

	//fn to_str() String {
	//	return this.parts.join("/");
	//}
}

fn exe_dir() +String {
	let res = EXE_DIR ?! {
		let dir = dir_of(exe_path());
		EXE_DIR = dir;
		return exe_dir();
	};
	return res;
}

fn exe_path() +String {
	let path = EXE_PATH ?! {
		let str = String.make_empty(sys.OS.PATHMAX);
		let data = str.data();

		#if OS == win
    	let len = sys.GetModuleFileNameA(null, data, sys.OS.PATHMAX);
		#else
		let link = "/proc/self/exe".to_c_string();
    	let len = sys.readlink(link, data, sys.OS.PATHMAX);
		mem:free(link);
		#end

		let ref = share(str);
		EXE_PATH = str;
		return ref;
	};
	return path;
}

fn ext(path: &String) String {
	let len = path.bytes();
	let start = len;
	let found = false;
	while start > 0 {
		start--;
		let ch = path.byte(start);
		if ch == '.' {
			start++;
			found = true;
			break;
		}
		if ch == '/' || ch == '\\' {
			break;
		}
	}
	if found == false {
		return "";
	}
	return path.sub_str_bytes(start, len - start);
}

// e.g. /etc/nginx/nginx.conf -> /etc/nginx
// e.g. /etc/nginx/ -> /etc
// e.g. /etc -> /
// e.g. "" -> ""
// e.g. etc -> etc
fn dir_of(path: &String) String {
	let end = path.bytes() - 1;
	while(end > 0){
		end--;
		let ch = path.byte(end);
		if(ch == '/' || ch == '\\'){
			if end == 0 {
				end++;
			}
			return path.sub_str_bytes(0, end);
		}
	}
	return path + "";
}

// e.g. /etc/nginx/nginx.conf -> nginx.conf
// e.g. /etc/nginx/ -> nginx
// e.g. / -> ""
// e.g. "" -> ""
fn basename(path: &String) String {
	let len = path.bytes();
	let start = len;
	while(start > 0){
		start--;
		let ch = path.byte(start);
		if(ch == '/' || ch == '\\'){
			start++;
			break;
		}
	}
	return path.sub_str_bytes(start, len - start);
}
