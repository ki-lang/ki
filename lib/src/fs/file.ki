
header "sys" as sys;

use mem;
use io;

fn stat(path: &String, buf: &sys.cstruct_stat) void !failed {
	let plen = path.bytes();
	let cstr_ptr = @stack_alloc(plen + 1);
	mem:copy(path.data(), cstr_ptr, plen);
	@ptrv(cstr_ptr, u8, plen) = '\0';
	let cstr = cstr_ptr @as c_string;
	let res = sys.stat(cstr, buf);
	if res == -1 : throw failed;
}
fn size(path: &String) uxx {
	let buf = @stack_alloc(sizeof_class(sys.cstruct_stat)) @as sys.cstruct_stat;
	stat(path, buf) !! return 0;;
	return buf.st_size @as uxx;
}

fn open_fd(path: &String, read: bool, write: bool) i32 !open {

	let cstr = path.to_c_string();
	let fd = sys.open(cstr, 0, 0);
	if fd == -1 {
		throw open;
	}
	return fd;
}
fn fd_close(fd: i32) void !close {
	let check = sys.close(fd);
	if(check != 0){
		throw close;
	}
}

fn read(path: &String) String !open !read !close {

	let fd = open_fd(path, true, false) !! throw open;;

	let res = ByteBuffer.new(4096);
	let buf = @stack_alloc(4096);
	let readcount_ : ixx = 4096;
	while true {
		let readcount = sys.read(fd, buf, 4096);
		if(readcount < 0){
			throw read;
		}
		res.append_from_ptr(buf, readcount @as uxx);
		if(readcount != readcount_) {
			break;
		}
	}

	let check = sys.close(fd);
	if(check != 0){
		//throw close;
	}

	return res.to_str();
}

fn write(path: &String, content: &String, append: bool = true) void !open {

	let cpath = path.to_c_string();

    let flags = sys.OS.O_TRUNC;
    if append : flags = sys.OS.O_APPEND;

    let fd = io:open(cpath, sys.OS.O_RDWR | sys.OS.O_CREAT | flags, 0744) !! throw open;;

    io:write(fd, content)!;
    io:close(fd);
}

fn exists(path: &String) bool {
	let fd = open_fd(path, true, false) !! return false;;
	fd_close(fd)!;
	return true;
}
fn delete(path: &String) void !failed {

	let plen = path.bytes();
	let cstr_ptr = @stack_alloc(plen + 1);
	mem:copy(path.data(), cstr_ptr, plen);
	@ptrv(cstr_ptr, u8, plen) = '\0';
	let cstr = cstr_ptr @as c_string;

	let res = sys.unlink(cstr);
	if res == -1 {
		throw failed;
	}
}
fn mkdir(path: &String) void !failed {

	let plen = path.bytes();
	let cstr_ptr = @stack_alloc(plen + 1);
	mem:copy(path.data(), cstr_ptr, plen);
	@ptrv(cstr_ptr, u8, plen) = '\0';
	let cstr = cstr_ptr @as c_string;

	let res = sys.mkdir(cstr, 448); // 0700
	if res == -1 {
		throw failed;
	}
}

fn is_file(path: &String) bool {
	let buf = @stack_alloc(sizeof_class(sys.cstruct_stat)) @as sys.cstruct_stat;
	stat(path, buf) !! return false;;
	return (buf.st_mode & sys.OS.S_IFMT) == sys.OS.S_IFREG;
}
fn is_dir(path: &String) bool {
	let buf = @stack_alloc(sizeof_class(sys.cstruct_stat)) @as sys.cstruct_stat;
	stat(path, buf) !! return false;;
	return (buf.st_mode & sys.OS.S_IFMT) == sys.OS.S_IFDIR;
}

fn files_in(directory: &String, files: bool = true, dirs: bool = true) Array[String] {
	let result = Array[String].new();
	let path = directory.rtrim("/") + "/";

	#if OS == win

	let pattern = (path + "*").to_c_string();
	let data = @stack_alloc(sizeof_class(sys.WIN32_FIND_DATAA)) @as sys.WIN32_FIND_DATAA;
    let hFind = sys.FindFirstFileA(pattern, data);
    if hFind != -1 @as ptr {
		let loop = true;
		while loop {
			let fn = (@ptr_of(data.cFileName) @as c_string).to_str();

			if fn.bytes() < 3 && (fn == "." || fn == "..") {
				loop = sys.FindNextFileA(hFind, data);
				continue;
			}

            let is_dir = (data.dwFileAttributes & 0x10) > 0;
            let is_file = !is_dir;

            if (dirs && is_dir) || (files && is_file) {
				result.push(path + fn);
            }

			loop = sys.FindNextFileA(hFind, data);
		}
        sys.FindClose(hFind);
	}
	pattern.free();

	#else

	let dir = path.to_c_string();
	let d = sys.opendir(dir);

    if d != null {
		let ent = sys.readdir(d);
        while ent != null {

			let fn = (@ptr_of(ent.d_name) @as c_string).to_str();
			if fn.bytes() < 3 && (fn == "." || fn == "..") {
				ent = sys.readdir(d);
				continue;
			}
			let fpath = path + fn;

            let _is_dir = is_dir(fpath);
            let _is_file = !_is_dir;

            if (dirs && _is_dir) || (files && _is_file) {
				result.push(fpath);
			}
			ent = sys.readdir(d);
        }
        sys.closedir(d);
    }

	dir.free();

	#end

	return result;
}
