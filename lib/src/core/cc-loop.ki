
use os;

shared cc_ready : uxx;

fn cc_start {
	let thr = os:Thread[void].start(cc_loop) !! panic("Failed to start cycle collector");;
	while cc_ready != 1 {
		os:sleep_ms(1);
	}
}

fn cc_loop {

	#each_class class
	#if IS_CIRCULAR class
	KI_CC_#{ CLASS_EXPORT_NAME class } = CycleCollector[class].create();
	#end
	#end

	cc_ready = 1;

	while true {
		os:sleep_ms(1000);

		#each_class class
		#if IS_CIRCULAR class
		KI_CC_#{ CLASS_EXPORT_NAME class }.start();
		#end
		#end

		#each_class class
		#if IS_CIRCULAR class
		KI_CC_#{ CLASS_EXPORT_NAME class }.rc_check_items();
		#end
		#end

		#each_class class
		#if IS_CIRCULAR class
		KI_CC_#{ CLASS_EXPORT_NAME class }.mark_keep();
		#end
		#end

		#each_class class
		#if IS_CIRCULAR class
		KI_CC_#{ CLASS_EXPORT_NAME class }.deref_cycle_objects();
		#end
		#end

		#each_class class
		#if IS_CIRCULAR class
		KI_CC_#{ CLASS_EXPORT_NAME class }.free_unused();
		#end
		#end
	}
}
