
use mem;

class Pool[T] {
	data: ptr;
	size: uxx;
	head: uxx = 0;
	tail: uxx = 0;

	static fn new(max_items: uxx) CLASS {
		if max_items < 2{
			max_items = 2;
		}
		return CLASS {
			size: max_items,
			data: mem:alloc(max_items * sizeof(T)),
		};
	}

	fn pop() T !empty {
		let head = this.head;
		let tail = this.tail;
		if tail == head {
			throw empty;
		}
		let data = this.data;
		let result = @ptrv(data, T, tail);
		let new_tail = tail + 1;
		if new_tail == this.size {
			this.tail = 0;
		} else {
			this.tail = new_tail;
		}

		return result;
	}

	fn add(item: T) void !full {
		let size = this.size;
		let head = this.head;
		let next_head = head + 1;
		let tail = this.tail;

		if next_head == size {
			next_head = 0;
		}

		rep next_head = next_head;

		if next_head == tail {
			throw full;
		}

		let data = this.data;
		@ptrv(data, T, head) = item;
		@move item;
		this.head = next_head;
	}

	fn __before_free() void {
		// Deref items 
		while true {
			let item = this.pop() !! break;;
		}
		mem:free(this.data);
	}
}