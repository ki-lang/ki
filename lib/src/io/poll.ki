
header "sys" as sys;

use mem;
use utils;
use os;

class Poll[T] {
    - epoll_fd: i32 = 0;
    - epoll_buffer: ptr;
    - listeners: Array[Listener[T]] = Array[Listener[T]].new();
    - lsn_by_index: ptr;
    - lsn_by_index_size: uxx = 20;

    static fn new() CLASS {

        #if OS == win
		os:WSA_init();
		#end

        #if OS == linux
        let fd = sys.epoll_create(1);
        return CLASS {
            epoll_fd: fd,
            epoll_buffer: mem:alloc(20 * @sizeof_class(sys.cstruct_epoll_event)),
            lsn_by_index: 0 @as ptr,
        };
        #else
        return CLASS {
            epoll_buffer: mem:alloc(20 * @sizeof_class(sys.cstruct_pollfd)),
            lsn_by_index: mem:alloc(20 * @sizeof(ptr)),
        };
        #end
    }

    fn wait(timeout: i32 = -1) Array[Listener[T]] {

        let events = Array[Listener[T]].new();

        #if OS == linux
        let ebuf = this.epoll_buffer;
        let count = sys.epoll_wait(this.epoll_fd, ebuf, 10, timeout);
        if count <= 0 {
            os:sleep_ms(100);
            return events;
        }
        rep count = count @as uxx;
        let i = 0#uxx;
        while i < count {
            let ev = (ebuf + (i * @sizeof_class(sys.cstruct_epoll_event))) @as sys.cstruct_epoll_event;
            let lsn = ev.data @as *Listener[T];
            let add = &lsn;
            lsn.set_events(ev.events);
            if lsn.has_stopped_the_connection() {
                this.listeners.remove_item(lsn);
            }
            events.push(add);
            i++;
        }
        #else
        let by_index = this.lsn_by_index;
        let buf = this.epoll_buffer;
        let i = 0#uxx;
        each this.listeners as lsn {
            let pollfd = (buf + (i * @sizeof_class(sys.cstruct_pollfd))) @as sys.cstruct_pollfd;
            pollfd.fd = lsn.fd;
            pollfd.events = lsn.detect_events @as i16;
            pollfd.revents = 0;
            @ptrv(by_index, ptr, i) = lsn @as ptr;
            i++;
        }
        let all = i;
        let count = sys.poll(buf, all @as u32, timeout);
        if count <= 0 {
            //let err = sys.WSAGetLastError();
            os:sleep_ms(100);
            return events;
        }
        rep count = count @as uxx;
        i = 0;
        while i < all {
            let pollfd = (buf + (i * @sizeof_class(sys.cstruct_pollfd))) @as sys.cstruct_pollfd;
            if pollfd.revents == 0 {
                i++;
                continue;
            }
            let lsn = @ptrv(by_index, ptr, i) @as *Listener[T];
            let add = &lsn;
            lsn.set_events(pollfd.revents);
            if lsn.has_stopped_the_connection() {
                this.listeners.remove_item(lsn);
            }
            events.push(add);
            i++;
        }

        #end

        return events;
    }

    fn create_listener(fd: i32, data: T) Listener[T] {
        let lsn = Listener[T] {
            epoll_fd: this.epoll_fd,
            fd: fd,
            data: data,
        };

        #if OS == linux
        let ev = @stack_object(sys.cstruct_epoll_event);
        ev.events = 0;
        ev.data = lsn @as ptr;
        let res = sys.epoll_ctl(this.epoll_fd, sys.OS.EPOLL_CTL_ADD, fd, ev);
        if res != 0 {
            //println("> Failed to add epoll listener");
        }
        #else
        // Increase size
        let size = this.lsn_by_index_size;
        if this.listeners.length == size {
            size *= 2;
            this.lsn_by_index_size = size;
            mem:free(this.lsn_by_index);
            mem:free(this.epoll_buffer);
            this.lsn_by_index = mem:alloc(size * @sizeof(ptr));
            this.epoll_buffer = mem:alloc(size * @sizeof_class(sys.cstruct_pollfd));
        }
        #end

        lsn.update_epoll();
        this.listeners.push(&lsn);

        return lsn;
    }

    - fn __before_free() {
        #if OS == linux
        mem:free(this.epoll_buffer);
        #else
        mem:free(this.epoll_buffer);
        mem:free(this.lsn_by_index);
        #end
    }
}

class Listener[T] {
    data: T;
    ~ epoll_fd: i32 = 0;
    ~ fd: i32;
    ~ detect_read: bool = false;
    ~ detect_write: bool = false;
    - detect_events: u32 = 0;
    - events: u32 = 0;

    fn set_events(events: u32) {
        this.events = events;
    }

    fn has_read_request() bool {
        #if OS == linux
        return (this.events & sys.OS.EPOLLIN) > 0;
        #else
        return (this.events & sys.OS.POLLIN) > 0;
        #end
    }
    fn has_write_request() bool {
        #if OS == linux
        return (this.events & sys.OS.EPOLLOUT) > 0;
        #else
        return (this.events & sys.OS.POLLOUT) > 0;
        #end
    }
    fn has_stopped_the_connection() bool {
        let evs = this.events;
        #if OS == linux
        return (evs & sys.OS.EPOLLRDHUP) > 0 || (evs & sys.OS.EPOLLHUP) > 0 || (evs & sys.OS.EPOLLERR) > 0;
        #elif OS == macos
        return (evs & sys.OS.POLLRDHUP) > 0 || (evs & sys.OS.POLLHUP) > 0 || (evs & sys.OS.POLLERR) > 0;
        #else
        return (evs & sys.OS.POLLHUP) > 0 || (evs & sys.OS.POLLERR) > 0;
        #end
    }

    fn detect_read_request(v: bool) {
        this.detect_read = v;
        this.update_epoll();
    }
    fn detect_write_request(v: bool) {
        this.detect_write = v;
        this.update_epoll();
    }
    - fn update_epoll() {
        let ev = 0#u32;
        if this.detect_read {
        #if OS == linux
        ev = ev | sys.OS.EPOLLIN;
        #else
        ev = ev | sys.OS.POLLIN;
        #end
        }
        if this.detect_write {
        #if OS == linux
        ev = ev | sys.OS.EPOLLOUT;
        #else
        ev = ev | sys.OS.POLLOUT;
        #end
        }
        #if OS == linux
        ev = ev | sys.OS.EPOLLRDHUP;
        #elif OS == win
        //ev = ev | sys.OS.POLLHUP;
        #else
        ev = ev | sys.OS.POLLRDHUP;
        #end

        this.detect_events = ev;

        #if OS == linux
        let evo = @stack_object(sys.cstruct_epoll_event);
        evo.events = this.detect_events;
        evo.data = this @as ptr;
        let res = sys.epoll_ctl(this.epoll_fd, sys.OS.EPOLL_CTL_MOD, this.fd, evo);
        #end
    }
}

